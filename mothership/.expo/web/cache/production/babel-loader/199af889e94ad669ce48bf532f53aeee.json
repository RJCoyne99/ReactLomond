{"ast":null,"code":"import NativeModules from\"react-native-web/dist/exports/NativeModules\";import{getAssetByID}from\"./AssetRegistry\";import AssetSourceResolver from\"./AssetSourceResolver\";var _customSourceTransformer;var _serverURL;var _sourceCodeScriptURL;function getSourceCodeScriptURL(){var _sourceCode;if(_sourceCodeScriptURL){return _sourceCodeScriptURL;}var sourceCode=typeof nativeExtensions!=='undefined'?nativeExtensions.SourceCode:null;if(!sourceCode){sourceCode=NativeModules==null?void 0:NativeModules.SourceCode;}_sourceCodeScriptURL=(_sourceCode=sourceCode)==null?void 0:_sourceCode.scriptURL;return _sourceCodeScriptURL;}function getDevServerURL(){if(_serverURL===undefined){var sourceCodeScriptURL=getSourceCodeScriptURL();var match=sourceCodeScriptURL&&sourceCodeScriptURL.match(/^https?:\\/\\/.*?\\//);if(match){_serverURL=match[0];}else{_serverURL=null;}}return _serverURL;}export function setCustomSourceTransformer(transformer){_customSourceTransformer=transformer;}export default function resolveAssetSource(source){if(typeof source==='object'){return source;}var asset=getAssetByID(source);if(!asset){return undefined;}var resolver=new AssetSourceResolver(getDevServerURL(),null,asset);if(_customSourceTransformer){return _customSourceTransformer(resolver);}return resolver.defaultAsset();}Object.defineProperty(resolveAssetSource,'setCustomSourceTransformer',{get:function get(){return setCustomSourceTransformer;}});var pickScale=AssetSourceResolver.pickScale;export{pickScale};","map":{"version":3,"sources":["../src/resolveAssetSource.web.ts"],"names":[],"mappings":"uEAEA,OAAS,YAAT,uBACA,MAAO,CAAA,mBAAP,6BAIA,GAAI,CAAA,wBAAJ,CACA,GAAI,CAAA,UAAJ,CACA,GAAI,CAAA,oBAAJ,CAEA,QAAS,CAAA,sBAAT,EAA+B,iBAC7B,GAAI,oBAAJ,CAA0B,CACxB,MAAO,CAAA,oBAAP,CACD,CAED,GAAI,CAAA,UAAU,CAAG,MAAO,CAAA,gBAAP,GAA4B,WAA5B,CAA0C,gBAAgB,CAAC,UAA3D,CAAwE,IAAzF,CACA,GAAI,CAAC,UAAL,CAAiB,CACf,UAAU,CAAG,aAAH,cAAG,aAAa,CAAE,UAA5B,CACD,CACD,oBAAoB,cAAG,UAAH,eAAG,YAAY,SAAnC,CACA,MAAO,CAAA,oBAAP,CACD,CAED,QAAS,CAAA,eAAT,EAAwB,CACtB,GAAI,UAAU,GAAK,SAAnB,CAA8B,CAC5B,GAAM,CAAA,mBAAmB,CAAG,sBAAsB,EAAlD,CACA,GAAM,CAAA,KAAK,CAAG,mBAAmB,EAAI,mBAAmB,CAAC,KAApB,CAA0B,mBAA1B,CAArC,CACA,GAAI,KAAJ,CAAW,CAET,UAAU,CAAG,KAAK,CAAC,CAAD,CAAlB,CACD,CAHD,IAGO,CAEL,UAAU,CAAG,IAAb,CACD,CACF,CACD,MAAO,CAAA,UAAP,CACD,CAED,MAAM,SAAU,CAAA,0BAAV,CACJ,WADI,CAC+D,CAEnE,wBAAwB,CAAG,WAA3B,CACD,CAMD,cAAc,SAAU,CAAA,kBAAV,CAA6B,MAA7B,CAAwC,CACpD,GAAI,MAAO,CAAA,MAAP,GAAkB,QAAtB,CAAgC,CAC9B,MAAO,CAAA,MAAP,CACD,CAED,GAAM,CAAA,KAAK,CAAG,YAAY,CAAC,MAAD,CAA1B,CACA,GAAI,CAAC,KAAL,CAAY,CACV,MAAO,CAAA,SAAP,CACD,CAED,GAAM,CAAA,QAAQ,CAAG,GAAI,CAAA,mBAAJ,CAAwB,eAAe,EAAvC,CAA2C,IAA3C,CAAiD,KAAjD,CAAjB,CACA,GAAI,wBAAJ,CAA8B,CAC5B,MAAO,CAAA,wBAAwB,CAAC,QAAD,CAA/B,CACD,CACD,MAAO,CAAA,QAAQ,CAAC,YAAT,EAAP,CACD,CAED,MAAM,CAAC,cAAP,CAAsB,kBAAtB,CAA0C,4BAA1C,CAAwE,CACtE,GADsE,eACnE,CACD,MAAO,CAAA,0BAAP,CACD,CAHqE,CAAxE,EAMO,GAAQ,CAAA,SAAR,CAAsB,mBAAtB,CAAQ,SAAR,C","sourcesContent":["import { NativeModules } from 'react-native';\n\nimport { getAssetByID } from './AssetRegistry';\nimport AssetSourceResolver, { ResolvedAssetSource } from './AssetSourceResolver';\n\ndeclare let nativeExtensions: { SourceCode?: { scriptURL: string } } | undefined;\n\nlet _customSourceTransformer;\nlet _serverURL: string | undefined | null;\nlet _sourceCodeScriptURL: string | undefined | null;\n\nfunction getSourceCodeScriptURL(): string | undefined | null {\n  if (_sourceCodeScriptURL) {\n    return _sourceCodeScriptURL;\n  }\n\n  let sourceCode = typeof nativeExtensions !== 'undefined' ? nativeExtensions.SourceCode : null;\n  if (!sourceCode) {\n    sourceCode = NativeModules?.SourceCode;\n  }\n  _sourceCodeScriptURL = sourceCode?.scriptURL;\n  return _sourceCodeScriptURL;\n}\n\nfunction getDevServerURL(): string | null {\n  if (_serverURL === undefined) {\n    const sourceCodeScriptURL = getSourceCodeScriptURL();\n    const match = sourceCodeScriptURL && sourceCodeScriptURL.match(/^https?:\\/\\/.*?\\//);\n    if (match) {\n      // jsBundle was loaded from network\n      _serverURL = match[0];\n    } else {\n      // jsBundle was loaded from file\n      _serverURL = null;\n    }\n  }\n  return _serverURL;\n}\n\nexport function setCustomSourceTransformer(\n  transformer: (resolver: AssetSourceResolver) => ResolvedAssetSource\n): void {\n  _customSourceTransformer = transformer;\n}\n\n/**\n * `source` is either a number (opaque type returned by require('./foo.png'))\n * or an `ImageSource` like { uri: '<http location || file path>' }\n */\nexport default function resolveAssetSource(source: any): ResolvedAssetSource | undefined {\n  if (typeof source === 'object') {\n    return source;\n  }\n\n  const asset = getAssetByID(source);\n  if (!asset) {\n    return undefined;\n  }\n\n  const resolver = new AssetSourceResolver(getDevServerURL(), null, asset);\n  if (_customSourceTransformer) {\n    return _customSourceTransformer(resolver);\n  }\n  return resolver.defaultAsset();\n}\n\nObject.defineProperty(resolveAssetSource, 'setCustomSourceTransformer', {\n  get() {\n    return setCustomSourceTransformer;\n  },\n});\n\nexport const { pickScale } = AssetSourceResolver;\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}